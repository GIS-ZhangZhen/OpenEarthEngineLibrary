var inputs=[
  {name:"imageCollection", description:"The imageCollection to export.", type:'ee.ImageCollection', optional:false},
  {name:"nameProperty", description:'The property to use as the image name at export', type:'string|ee.String', defaultValue:'system:index', optional:false},
  {name:"description", description:'A human-readable prefix name for the tasks.', type:'string', defaultValue:" ", optional:false},
  {name:"assetId", description:"The destination asset ID.", type:'string|ee.String', optional:true},
  {name:"pyramidingPolicy", description:'The pyramiding policy to apply to each band in the image, keyed by band name. Values must be one of: mean, sample, min, max, or mode. Defaults to "mean". A special key, ".default" may be used to change the default for all bands.', type:'Object', optional:true},
  {name:"dimensions", description:'The dimensions to use for the exported image. Takes either a single positive integer as the maximum dimension or "WIDTHxHEIGHT" where WIDTH and HEIGHT are each positive integers.', type:'number|string', optional:true},
  {name:"region", description:"A LinearRing, Polygon, or coordinates representing region to export. These may be specified as the Geometry objects or coordinates serialized as a string. If not specified, the region defaults to the viewport at the time of invocation.", type:'ee.Geometry', optional:true},
  {name:"scale", description:"Resolution in meters per pixel. Defaults to 1000.", type:'number', optional:true},
  {name:"crs", description:"CRS to use for the exported image.", type:'string|ee.String|ee.Projection', optional:true},
  {name:"crsTransform", description:'Affine transform to use for the exported image. Requires "crs" to be defined.', type:'ee.List|string|ee.String', optional:true},
  {name:"maxPixels", description:"Restrict the number of pixels in the export. By default, you will see an error if the export exceeds 1e8 pixels. Setting this value explicitly allows one to raise or lower this limit.", type:'number', optional:true},
  {name:"autoExport", description:"Use autoExport", type:'boolean', optional:true},
  {name:"overwrite", description:"In the case of use of autoExports, it removes first the file if it already exists.", type:'boolean', optional:true}
  {name:"exportSize", description:"Allow to explicitly set the size of the collection to export", type:'integer|ee.Number', optional:true}
 ]

var reference={name:'toAsset',license:'MIT', description:'Creates a bunch of batch tasks (one per image) to export an ImageCollection as multiple ee.Image raster to an Earth Engine ImageCollection asset.', contributors:['Mathieu Gravey']};

exports.createDocumentation=function(){ return {inputs:inputs, reference:reference};}

exports.createFunction=function(internal,relPath){
return function(){
    var inputDictionary=internal.readInputs(Array.prototype.slice.call(arguments,0),inputs,reference,relPath);
    internal.addRef(reference,relPath);
     
    var col=inputDictionary.imageCollection;
    var prop=inputDictionary.nameProperty;
    var assetId=inputDictionary.assetId;
    var prefix=inputDictionary.description;
    var autoExport=inputDictionary.autoExport;
    var overwrite=inputDictionary.overwrite;
    var exportSize=inputDictionary.exportSize;
    delete inputDictionary.nameProperty;
    delete inputDictionary.imageCollection;
    delete inputDictionary.assetId;
    delete inputDictionary.autoExport;
    delete inputDictionary.overwrite;
    delete inputDictionary.exportSize;
    //print('GEE_Addon_confirmManager:removeConfirmOn:ee.data.createAsset');
    //print('GEE_Addon_confirmManager:removeConfirmOn:ee.data.startProcessing')
    //print('GEE_Addon_confirmManager:removeConfirmOn:ee.data.deleteAsset');
    if( /^users\//.test(assetId) || /^projects\//.test(assetId))
    {
      // already full name
    }
    else{
      // user prexix
      assetId=ee.data.getAssetRoots()[0].id+'/'+assetId;
    }
    
    
    try{
      var info=ee.data.getAsset(assetId);
      print(info)
      if(info.type!='ImageCollection')
       throw "Not an ImageCollection";
    }catch(e){
      if(e=="Not an ImageCollection")
        throw "Asset exist, but is not an ImageCollection"
      else{
        ee.data.createAsset({type:'ImageCollection'}, assetId)
      }
    }
    //print('GEE_Addon_confirmManager:resetConfirmOn:ee.data.createAsset');
    if(exportSize){}
      var size=ee.Number(exportSize);
    else
      var size=col.size();
    

    size.evaluate(function(amountImage){
      if(autoExport)
      {
        var taskIds=ee.data.newTaskId(amountImage);
      }
      for (var i=0; i<amountImage; i++){
        var exportDic=inputDictionary;
        var im=ee.Image(col.toList(amountImage).get(i));
        var name=im.get(ee.String(prop)).getInfo(); // need to be improuved
        exportDic.image=im;
        exportDic.assetId=assetId+'/'+name;
        exportDic.description=prefix+i;//ee.String(exportDic.description).cat(i)//im.get(prop))
        if(autoExport)
        {
          exportDic.element=exportDic.image;
          delete exportDic.image;
          exportDic.type='EXPORT_IMAGE';
          var assetData=false;
          try
            {
              assetData=ee.data.getAsset(exportDic.assetId);
            }
          catch (e)
            {}
          if(overwrite && assetData){
            ee.data.deleteAsset(exportDic.assetId);
            assetData=undefined;
          }
          if(!assetData)
            ee.data.startProcessing(taskIds[i],exportDic,function(){});
        }else
        {
          Export.image.toAsset(exportDic);
        }
        //print('GEE_Addon_confirmManager:resetConfirmOn:ee.data.startProcessing');
        //print('GEE_Addon_confirmManager:resetConfirmOn:ee.data.deleteAsset');
      }
      
    })
  }
}

 