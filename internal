//exports.addRef=;

function convert2Terminals(dict,internal){
  var temp={};
  for(var key in dict){
    if(key=='internal')
      continue;
    if(typeof(dict[key]['createFunction'])=='function'){
      temp[key]=dict[key].createFunction(internal);
    }else{
      temp[key]=convert2Terminals(dict[key],internal);
    }
  }
  return temp;
}

exports.readInputs=function(args,inputs,algoInfo){
  var output={};
  var arrayInput=false;
  if(args.length==1 && typeof(args[0])==typeof({}) 
    /*&& (inputs.map(x=> x.name).filter(value => Object.keys(args[0]).includes(value)).length>0 || (Object.keys(args[0]).length===0))*/){
    output=args[0];
    arrayInput=true;
  }
  print('arrayInput',arrayInput)
  var listKeys=Object.keys(output);
  for (var i=0; i<inputs.length; i++){
    if(listKeys.indexOf(inputs[i].name)>=0){
      //check type one day
    }
    else{
      if(args.length<i || arrayInput){
        //put default value
        if(!inputs[i].optional)
          if (inputs[i].defaultValue)
              output[inputs[i].name]=inputs[i].defaultValue;
            else
              throw algoInfo.name+' require '+inputs[i].name+', but no value or default value provided'
      }
      else{
        if(!inputs[i].optional)
          {
            output[inputs[i].name]=args[i];
          }
      }
    }
  }
  return output;
}


exports.setupLibrary=function(libs,exp){
  //setInternal(libs,libs.internal)
  /*for(var key in libs.internal){
    libs[key].internal=libs.internal;
  }*/
  libs.ref=[];
  libs.internal.addRef=function(ref){libs.ref.push(ref)}
  
  var teminals=convert2Terminals(libs,libs.internal);
  teminals.internal=libs;
  
  teminals.refs=function(){
    return libs.ref;
  }
  
  return teminals;
};

/*
exports.getDocumentation=function(libs,exp){
  //setInternal(libs,libs.internal)

  libs.ref=[];
  libs.internal.addRef=function(ref){libs.ref.push(ref)}
  
  var teminals=convert2Terminals(libs,libs.internal);
  teminals.internal=libs;
  
  teminals.refs=function(){
    return libs.ref;
  }
  
  return teminals;
};*/

