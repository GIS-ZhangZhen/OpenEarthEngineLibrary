//exports.addRef=;

function convert2Terminals(dict,internal,relativePath){
  var temp={};
  for(var key in dict){
    if(key=='internal')
      continue;
    var path=relativePath+"."+key;
    if(typeof(dict[key]['createFunction'])=='function'){
      temp[key]=dict[key].createFunction(internal,path);
    }else{
      temp[key]=convert2Terminals(dict[key],internal,path);
    }
  }
  return temp;
}

exports.readInputs=function(args,inputs,algoInfo,relPath){
  var output={};
  var arrayInput=false;
  if(args.length==1 && typeof(args[0])==typeof({}) 
    && (inputs.map(function(x){return x.name}).filter(value => Object.keys(args[0]).includes(value)).length>0)/* || (Object.keys(args[0]).length===0))*/){
    output=args[0];
    arrayInput=true;
  }
  var listKeys=Object.keys(output);
  for (var i=0; i<inputs.length; i++){
    if(listKeys.indexOf(inputs[i].name)>=0){
      //check type one day
    }
    else{
      if(args.length<=i || arrayInput){
        //put default value
        if(!inputs[i].optional)
          if (inputs[i].defaultValue)
              output[inputs[i].name]=inputs[i].defaultValue;
            else
              throw relPath+' require '+inputs[i].name+', but no value or default value provided'
      }
      else{
        if(!inputs[i].optional)
          {
            output[inputs[i].name]=args[i];
          }
      }
    }
  }
  return output;
}


exports.setupLibrary=function(libs,exp){
  var teminals=convert2Terminals(libs,libs.internal,"OpenEEL");
  teminals.internal=libs;
  
  libs.ref=[];
  libs.internal.addRef=function(ref){libs.ref.push(ref)}
  
  teminals.refs=function(){
    return libs.ref;
  }
  
  return teminals;
};

function getDoc(dict,relativePath){
  var temp={};
  for(var key in dict){
    if(key=='internal')
      continue;
    var path=relativePath+"."+key;
    if(typeof(dict[key]['createFunction'])=='function'){
      temp[key]=dict[key].createDocumentation();
      temp[key].fullPath=path;
    }else{
      temp[key]=getDoc(dict[key],path);
    }
  }
  return temp;
}

exports.getDocumentation=function(libs,exp){
  return convert2Terminals(libs,"OpenEEL");
};


exports.typeEEObject=function(a){ return String(a).match('ee.*\\(')[0].slice(0,-1) }

