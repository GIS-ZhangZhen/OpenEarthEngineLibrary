{
    "Export": {
        "loadIfExistElseExport": {
            "inputs": [
                {
                    "name": "param",
                    "description": "Parameters of Export.*.toAsset()",
                    "type": "object",
                    "optional": false
                }
            ],
            "reference": {
                "name": "loadIfExistElseExport",
                "license": "MIT",
                "description": "Same as Export.*.toAsset, but do not export and load if the asset already exists, else export using the same parameters as Export.*.toAsset(...)."
            },
            "fullPath": ".Export.loadIfExistElseExport"
        },
        "ImageCollection": {
            "asImageToAsset": {
                "inputs": [
                    {
                        "name": "imageCollection",
                        "description": "The imageCollection to export as single ee.Image.",
                        "type": "ee.ImageCollection",
                        "optional": false
                    },
                    {
                        "name": "description",
                        "description": "A human-readable name of the task. Defaults to \"myExportImageTask\"",
                        "type": "string|ee.String",
                        "defaultValue": "myExportImageTask",
                        "optional": true
                    },
                    {
                        "name": "assetId",
                        "description": "The destination asset ID.",
                        "type": "string|ee.String",
                        "optional": true
                    },
                    {
                        "name": "pyramidingPolicy",
                        "description": "The pyramiding policy to apply to each band in the image, keyed by band name. Values must be one of: mean, sample, min, max, or mode. Defaults to \"mean\". A special key, \".default\" may be used to change the default for all bands.",
                        "type": "Object",
                        "optional": true
                    },
                    {
                        "name": "dimensions",
                        "description": "The dimensions to use for the exported image. Takes either a single positive integer as the maximum dimension or \"WIDTHxHEIGHT\" where WIDTH and HEIGHT are each positive integers.",
                        "type": "number|string",
                        "optional": true
                    },
                    {
                        "name": "region",
                        "description": "A LinearRing, Polygon, or coordinates representing region to export. These may be specified as the Geometry objects or coordinates serialized as a string. If not specified, the region defaults to the viewport at the time of invocation.",
                        "type": "ee.Geometry",
                        "optional": true
                    },
                    {
                        "name": "scale",
                        "description": "Resolution in meters per pixel. Defaults to 1000.",
                        "type": "number",
                        "optional": true
                    },
                    {
                        "name": "crs",
                        "description": "CRS to use for the exported image.",
                        "type": "string|ee.String",
                        "optional": true
                    },
                    {
                        "name": "crsTransform",
                        "description": "Affine transform to use for the exported image. Requires \"crs\" to be defined.",
                        "type": "ee.List|string|ee.String",
                        "optional": true
                    },
                    {
                        "name": "maxPixels",
                        "description": "Restrict the number of pixels in the export. By default, you will see an error if the export exceeds 1e8 pixels. Setting this value explicitly allows one to raise or lower this limit.",
                        "type": "number",
                        "optional": true
                    }
                ],
                "reference": {
                    "name": "asImageToAsset",
                    "license": "MIT",
                    "description": "Creates a batch task to export ImageCollection as an Image raster to an Earth Engine asset. Tasks can be started from the Tasks tab. each image need to have the same bands."
                },
                "fullPath": ".Export.ImageCollection.asImageToAsset"
            },
            "toAsset": {
                "inputs": [
                    {
                        "name": "imageCollection",
                        "description": "The imageCollection to export.",
                        "type": "ee.ImageCollection",
                        "optional": false
                    },
                    {
                        "name": "nameProperty",
                        "description": "The property to use as the image name at export",
                        "type": "string|ee.String",
                        "defaultValue": "system:index",
                        "optional": false
                    },
                    {
                        "name": "description",
                        "description": "A human-readable prefix name for the tasks.",
                        "type": "string",
                        "defaultValue": "",
                        "optional": false
                    },
                    {
                        "name": "assetId",
                        "description": "The destination asset ID.",
                        "type": "string|ee.String",
                        "optional": true
                    },
                    {
                        "name": "pyramidingPolicy",
                        "description": "The pyramiding policy to apply to each band in the image, keyed by band name. Values must be one of: mean, sample, min, max, or mode. Defaults to \"mean\". A special key, \".default\" may be used to change the default for all bands.",
                        "type": "Object",
                        "optional": true
                    },
                    {
                        "name": "dimensions",
                        "description": "The dimensions to use for the exported image. Takes either a single positive integer as the maximum dimension or \"WIDTHxHEIGHT\" where WIDTH and HEIGHT are each positive integers.",
                        "type": "number|string",
                        "optional": true
                    },
                    {
                        "name": "region",
                        "description": "A LinearRing, Polygon, or coordinates representing region to export. These may be specified as the Geometry objects or coordinates serialized as a string. If not specified, the region defaults to the viewport at the time of invocation.",
                        "type": "ee.Geometry",
                        "optional": true
                    },
                    {
                        "name": "scale",
                        "description": "Resolution in meters per pixel. Defaults to 1000.",
                        "type": "number",
                        "optional": true
                    },
                    {
                        "name": "crs",
                        "description": "CRS to use for the exported image.",
                        "type": "string|ee.String",
                        "optional": true
                    },
                    {
                        "name": "crsTransform",
                        "description": "Affine transform to use for the exported image. Requires \"crs\" to be defined.",
                        "type": "ee.List|string|ee.String",
                        "optional": true
                    },
                    {
                        "name": "maxPixels",
                        "description": "Restrict the number of pixels in the export. By default, you will see an error if the export exceeds 1e8 pixels. Setting this value explicitly allows one to raise or lower this limit.",
                        "type": "number",
                        "optional": true
                    },
                    {
                        "name": "autoExport",
                        "description": "Use autoExport",
                        "type": "boolean",
                        "optional": true
                    },
                    {
                        "name": "overwrite",
                        "description": "In the case of use of autoExports, it removes first the file if it already exists.",
                        "type": "boolean",
                        "optional": true
                    }
                ],
                "reference": {
                    "name": "toAsset",
                    "license": "MIT",
                    "description": "Creates a bunch of batch tasks (one per image) to export an ImageCollection as multiple ee.Image raster to an Earth Engine ImageCollection asset."
                },
                "fullPath": ".Export.ImageCollection.toAsset"
            }
        }
    },
    "Image": {
        "semivariogram": {
            "inputs": [
                {
                    "name": "input",
                    "description": "Single band image or imageCollection on which to run the computation.",
                    "type": "ee.Image|ee.ImageCollection",
                    "optional": false
                },
                {
                    "name": "region",
                    "description": "The region on which to compute the variogram ",
                    "type": "ee.Geometry",
                    "optional": false
                },
                {
                    "name": "radius",
                    "description": "The radius of the windows used to get neighbors.",
                    "type": "integer",
                    "defaultValue": 10,
                    "optional": false
                },
                {
                    "name": "Return",
                    "description": "Return",
                    "type": "ee.FeatureCollection",
                    "defaultValue": null,
                    "optional": true
                }
            ],
            "reference": {
                "name": "semivariogram",
                "license": "GPLv3",
                "description": "Compute the semivariogram"
            },
            "fullPath": ".Image.semivariogram"
        },
        "inverseDistanceInterpolation": {
            "inputs": [
                {
                    "name": "radius",
                    "description": "The radius of the windows used to get neighbors.",
                    "type": "integer",
                    "defaultValue": 10,
                    "optional": false
                },
                {
                    "name": "power",
                    "description": "The power of the inverse distance",
                    "type": "number",
                    "defaultValue": 2,
                    "optional": false
                },
                {
                    "name": "useConvolution",
                    "description": "Use traditional neighborhood reduction or convolution",
                    "type": "boolean",
                    "defaultValue": true,
                    "optional": false
                },
                {
                    "name": "image",
                    "description": "The image on which to run the computation",
                    "type": "ee.Image",
                    "optional": true
                },
                {
                    "name": "Return",
                    "description": "Return",
                    "type": "function|ee.Image",
                    "defaultValue": null,
                    "optional": true
                }
            ],
            "reference": {
                "name": "InverseDistanceInterpolation",
                "license": "MIT",
                "description": "Compute a gap filling interpolation using inverse distance weighting. It returns a function, or apply on an image if \"image\" is informed and return the result of the computation."
            },
            "fullPath": ".Image.inverseDistanceInterpolation"
        },
        "kriging": {
            "inputs": [
                {
                    "name": "covFun",
                    "description": "The covariance function,fun(ee.Array)",
                    "type": "function",
                    "optional": false
                },
                {
                    "name": "radius",
                    "description": "The radius of the windows used to get neighbors.",
                    "type": "integer",
                    "defaultValue": 10,
                    "optional": false
                },
                {
                    "name": "skipInfomed",
                    "description": "Do not compute on informed locations. To set to false in presence of a kernel with a 0 in the center",
                    "type": "boolean",
                    "defaultValue": true,
                    "optional": false
                },
                {
                    "name": "kernel",
                    "description": "Neighbors with weight equal to 0 are ignored, the size needs to be compatible with the radius.",
                    "type": "ee.Kernel",
                    "optional": true
                },
                {
                    "name": "image",
                    "description": "The image on which to run the computation.",
                    "type": "ee.Image",
                    "optional": true
                },
                {
                    "name": "Return",
                    "description": "Return",
                    "type": "function|ee.Image",
                    "defaultValue": null,
                    "optional": true
                }
            ],
            "reference": {
                "name": "kriging",
                "license": "GPLv3",
                "description": "Compute a gap filling interpolation using kriging. It returns a function, or apply on an image if \"image\" is informed and return the result of the computation."
            },
            "fullPath": ".Image.kriging"
        }
    },
    "Algorithms": {
        "MODIS": {
            "terrainShadow": {
                "inputs": [
                    {
                        "name": "modisImage",
                        "description": "A MODIS image",
                        "type": "ee.Image",
                        "defaultValue": null,
                        "optional": false
                    },
                    {
                        "name": "kernelHalfSize",
                        "description": "The radius of the kernel",
                        "type": "number",
                        "defaultValue": 10,
                        "optional": false
                    },
                    {
                        "name": "Return",
                        "description": "Return",
                        "type": "function",
                        "defaultValue": null,
                        "optional": true
                    }
                ],
                "reference": {
                    "name": "terrainShadow",
                    "license": "MIT",
                    "description": "Compute the terrain shadow of MODIS images"
                },
                "fullPath": ".Algorithms.MODIS.terrainShadow"
            }
        }
    },
    "data": {
        "deleteImageCollection": {
            "inputs": [
                {
                    "name": "imageCollectionAssetID",
                    "description": "The imageCollection to delete",
                    "type": "string",
                    "optional": false
                },
                {
                    "name": "keepEmptyCollection",
                    "description": "Keep the empty collection",
                    "type": "boolean",
                    "defaultValue": false,
                    "optional": false
                },
                {
                    "name": "pageSize",
                    "description": "Maximum number of elements",
                    "type": "integer",
                    "defaultValue": 10,
                    "optional": false
                }
            ],
            "reference": {
                "name": "deleteImageCollection",
                "license": "MIT",
                "description": "Delete all ee.Image inside an ImageCollection and the ImageCollection."
            },
            "fullPath": ".data.deleteImageCollection"
        }
    },
    "ImageCollection": {
        "SavatskyGolayFilter": {
            "inputs": [
                {
                    "name": "collection",
                    "description": "The image collection on which to perform the filtering",
                    "type": "ee.ImageCollection",
                    "defaultValue": null,
                    "optional": false
                },
                {
                    "name": "filter",
                    "description": "The moving windows filter",
                    "type": "ee.Filter",
                    "defaultValue": null,
                    "optional": false
                },
                {
                    "name": "distanceFunction",
                    "description": "A lambda function that specifies how to compute distance between two images that return an ee.Image (or an ee.Number to add); function(ee.Image(infromedImage),ee.Image(estimationImage))",
                    "type": "function",
                    "defaultValue": null,
                    "optional": false
                },
                {
                    "name": "degree",
                    "description": "Polynomial degree, odd number >2",
                    "type": "integer",
                    "defaultValue": 3,
                    "optional": false
                },
                {
                    "name": "bandOfInterest",
                    "description": "Band selectors, by default all of them",
                    "type": "ee.List|object",
                    "defaultValue": [
                        ".*"
                    ],
                    "optional": false
                },
                {
                    "name": "EstimationCollection",
                    "description": "Specify the collection where to do the estimations (by default use the main collection)",
                    "type": "ee.Collection",
                    "defaultValue": null,
                    "optional": true
                },
                {
                    "name": "Return",
                    "description": "Return",
                    "type": "ee.ImageCollection",
                    "defaultValue": null,
                    "optional": true
                }
            ],
            "reference": {
                "name": "SavatskyGolayTimeFilter",
                "license": "MIT",
                "description": "Pass a Savatsky-Golay filter along the image collection"
            },
            "fullPath": ".ImageCollection.SavatskyGolayFilter"
        },
        "fromSingleImage": {
            "inputs": [
                {
                    "name": "args",
                    "description": "The assetID",
                    "type": "ee.Image|string|ee.String",
                    "optional": false
                },
                {
                    "name": "Return",
                    "description": "Return",
                    "type": "ee.ImageCollection",
                    "defaultValue": null,
                    "optional": true
                }
            ],
            "reference": {
                "name": "example",
                "license": "MIT",
                "description": "Load an image as collection."
            },
            "fullPath": ".ImageCollection.fromSingleImage"
        }
    },
    "timeSinceEpoch": 1612216944107
}