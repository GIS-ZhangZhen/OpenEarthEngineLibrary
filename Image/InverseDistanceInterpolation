var inputs=[{name:'radius',description:'the half size of the windows use to get neighbours', type:'integer',defaultValue:10 ,optional:false},
            {name:'power',description:'the power of teh inverse distance', type:'number',defaultValue:2 ,optional:false},
            {name:'useConvolution',description:'use traditional neighborhood reduction or convolution', type:'boolean',defaultValue:true ,optional:false},
            {name:'image',description:'the image on with to run teh computation ', type:'ee.Image',optional:true}
            {name:'Return',description:'Return', type:'function',defaultValue:null,optional:true}]
            
var reference={name:'InverseDistanceInterpolation',license:'MIT', description:'Compute a gap filling interpolation uisng inverse distance weighting. it return a function, or apply on an image if "image" is infromed and return teh result of the computation.'};

exports.createDocumentation=function(){ return {inputs:inputs, reference:reference};}

exports.createFunction=function(internal,relPath){
return function(){
    var inputDictionary=internal.readInputs(Array.prototype.slice.call(arguments,0),inputs,reference,relPath);
    internal.addRef(reference);
     
    //do whatever
    return inputDictionary.val;
  }
}

